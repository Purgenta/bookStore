generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  email        String          @unique
  name         String
  lastName     String
  phoneNumber  String
  createdAt    DateTime        @default(now())
  password     String
  role         Role            @default(USER)
  refreshToken RefreshToken[]
  orderReviews OrderReview[]
  cart         Cart[]
  favourites   Favourites[]
  reviews      Review[]
  address      String?
  preferences  UserPreferences?
}

model Product {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  pageNumber     Int
  title          String
  publishingDate DateTime
  isSelling      Boolean        @default(true)
  price          Float
  typeId         String
  quantity       Int
  publisherId    String
  description    String
  authorId       String
  author         Author         @relation(fields: [authorId], references: [id])
  cartItem       CartItem[]
  genre          ProductGenre[]
  reviews        Review[]
  favourites     Favourites[]
  productImages  ProductImage[]
  publisher      Publisher      @relation(fields: [publisherId], references: [id])
  productType    ProductType    @relation(fields: [typeId], references: [id])
  sale           Sale?
}

model Author {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  lastName String
  product Product[]
}

model Genre {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String  @unique
  products   ProductGenre[]
  preferences UserPreferences[]
}

model ProductGenre {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @map("_productId") @db.ObjectId
  genreId   String  @map("_genreId") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  genre     Genre   @relation(fields: [genreId], references: [id])

}


enum Role {
  USER
  ADMIN
}

enum CartStatus {
  ONGOING
  ISSUED_ORDER
}

model Review {
   id         String  @id @default(auto()) @map("_id") @db.ObjectId
  comment    String  
  rating     Float
  userId    String  @map("_userId") @db.ObjectId
  productId String  @map("_productId") @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model Publisher {
   id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  product Product[]
}

model Order {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  orderStatus OrderStatus @default(ONGOING)
  orderedAt   DateTime    @default(now())
  orderReview OrderReview?
  cartId     String      @map("_cartId") @db.ObjectId
  cart         Cart        @relation(fields: [cartId], references: [id])
}

model ProductType {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  type    String    @unique
  product Product[]
}

model Cart {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("_userId") @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  cartItems  CartItem[]
  orders     Order[]
  status     CartStatus @default(ONGOING)
}

model Favourites {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("_userId") @db.ObjectId
  productId String  @map("_productId") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model CartItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @map("_productId") @db.ObjectId
  cartId    String  @map("_cartId") @db.ObjectId
  quantity   Int
  product    Product @relation(fields: [productId], references: [id])
  cart       Cart    @relation(fields: [cartId], references: [id])
}

model RefreshToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String
  user         User   @relation(fields: [userId], references: [id])
  userId      String @map("_userId") @db.ObjectId
}

model ProductImage {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @map("_productId") @db.ObjectId
  imageUrl  String
  product    Product @relation(fields: [productId], references: [id])
}

model Sale {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @map("_productId") @db.ObjectId @unique
  discount  Int
  product   Product? @relation(fields: [productId], references: [id])
}

model OrderReview{
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("_userId") @db.ObjectId
  orderId   String  @map("_orderId") @db.ObjectId @unique
  user    User    @relation(fields: [userId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
  comment String  
  rating  Int
}

model UserPreferences {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @map("_userId") @db.ObjectId @unique
  genreId String @map("_genreId") @db.ObjectId @unique
  genre    Genre  @relation(fields: [genreId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  DELIVERED
  ONGOING
  CANCELED
}
